
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSAND DIVIDE ECHO ELSE EQUALITY EQUALS FALSE FOR ID IF INEQUALITY LESS LESS_OR_EQUAL LPAREN MINUS MORE MORE_OR_EQUAL NAME NOT NUMBER OR PLUS RPAREN SEMICOLON THEN TIMES TRUE WHILEblock : block statement\n             | statementstatement : expression SEMICOLONexpression : expression EQUALITY expression\n                  | expression INEQUALITY expression\n                  | expression LESS expression\n                  | expression MORE expression\n                  | expression LESS_OR_EQUAL expression\n                  | expression MORE_OR_EQUAL expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionstatement : NAME EQUALS expression SEMICOLONstatement : ECHO expression SEMICOLONexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAME'
    
_lr_action_items = {'NAME':([0,1,2,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,41,43,],[4,4,-2,25,25,25,-1,-3,25,25,25,25,25,25,25,25,25,25,25,25,25,-17,-16,]),'ECHO':([0,1,2,9,10,41,43,],[5,5,-2,-1,-3,-17,-16,]),'MINUS':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[6,6,-2,20,-21,6,6,6,-20,-1,-3,6,6,6,6,6,6,6,6,6,6,6,6,6,20,-21,-18,20,20,20,20,20,20,20,20,20,-12,-13,-14,-15,20,-17,-19,-16,]),'LPAREN':([0,1,2,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,41,43,],[7,7,-2,7,7,7,-1,-3,7,7,7,7,7,7,7,7,7,7,7,7,7,-17,-16,]),'NUMBER':([0,1,2,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,41,43,],[8,8,-2,8,8,8,-1,-3,8,8,8,8,8,8,8,8,8,8,8,8,8,-17,-16,]),'$end':([1,2,9,10,41,43,],[0,-2,-1,-3,-17,-16,]),'SEMICOLON':([3,4,8,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,42,],[10,-21,-20,41,-21,-18,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,43,-19,]),'EQUALITY':([3,4,8,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,],[11,-21,-20,11,-21,-18,11,11,11,11,11,11,11,11,11,-12,-13,-14,-15,11,-19,]),'INEQUALITY':([3,4,8,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,],[12,-21,-20,12,-21,-18,12,12,12,12,12,12,12,12,12,-12,-13,-14,-15,12,-19,]),'LESS':([3,4,8,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,],[13,-21,-20,13,-21,-18,13,13,13,13,13,13,13,13,13,-12,-13,-14,-15,13,-19,]),'MORE':([3,4,8,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,],[14,-21,-20,14,-21,-18,14,14,14,14,14,14,14,14,14,-12,-13,-14,-15,14,-19,]),'LESS_OR_EQUAL':([3,4,8,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,],[15,-21,-20,15,-21,-18,15,15,15,15,15,15,15,15,15,-12,-13,-14,-15,15,-19,]),'MORE_OR_EQUAL':([3,4,8,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,],[16,-21,-20,16,-21,-18,16,16,16,16,16,16,16,16,16,-12,-13,-14,-15,16,-19,]),'AND':([3,4,8,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,],[17,-21,-20,17,-21,-18,17,17,17,17,17,17,17,17,17,-12,-13,-14,-15,17,-19,]),'OR':([3,4,8,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,],[18,-21,-20,18,-21,-18,18,18,18,18,18,18,18,18,18,-12,-13,-14,-15,18,-19,]),'PLUS':([3,4,8,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,],[19,-21,-20,19,-21,-18,19,19,19,19,19,19,19,19,19,-12,-13,-14,-15,19,-19,]),'TIMES':([3,4,8,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,],[21,-21,-20,21,-21,-18,21,21,21,21,21,21,21,21,21,21,21,-14,-15,21,-19,]),'DIVIDE':([3,4,8,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,],[22,-21,-20,22,-21,-18,22,22,22,22,22,22,22,22,22,22,22,-14,-15,22,-19,]),'EQUALS':([4,],[23,]),'RPAREN':([8,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,],[-20,-21,-18,42,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'block':([0,],[1,]),'statement':([0,1,],[2,9,]),'expression':([0,1,5,6,7,11,12,13,14,15,16,17,18,19,20,21,22,23,],[3,3,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> block","S'",1,None,None,None),
  ('block -> block statement','block',2,'p_block','calc.py',123),
  ('block -> statement','block',1,'p_block','calc.py',124),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expr','calc.py',135),
  ('expression -> expression EQUALITY expression','expression',3,'p_expression','calc.py',140),
  ('expression -> expression INEQUALITY expression','expression',3,'p_expression','calc.py',141),
  ('expression -> expression LESS expression','expression',3,'p_expression','calc.py',142),
  ('expression -> expression MORE expression','expression',3,'p_expression','calc.py',143),
  ('expression -> expression LESS_OR_EQUAL expression','expression',3,'p_expression','calc.py',144),
  ('expression -> expression MORE_OR_EQUAL expression','expression',3,'p_expression','calc.py',145),
  ('expression -> expression AND expression','expression',3,'p_expression','calc.py',146),
  ('expression -> expression OR expression','expression',3,'p_expression','calc.py',147),
  ('expression -> expression PLUS expression','expression',3,'p_expression','calc.py',148),
  ('expression -> expression MINUS expression','expression',3,'p_expression','calc.py',149),
  ('expression -> expression TIMES expression','expression',3,'p_expression','calc.py',150),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','calc.py',151),
  ('statement -> NAME EQUALS expression SEMICOLON','statement',4,'p_statement_assign','calc.py',156),
  ('statement -> ECHO expression SEMICOLON','statement',3,'p_statement_echo','calc.py',160),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','calc.py',165),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','calc.py',170),
  ('expression -> NUMBER','expression',1,'p_expression_number','calc.py',175),
  ('expression -> NAME','expression',1,'p_expression_name','calc.py',180),
]
